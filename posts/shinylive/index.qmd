---
title: "Going live with shinylive"
description: ""
date: "2024-07-30"
draft: true
image: shinylive-shinylive-deployment-model.png
image-alt: "A diagram depicting how shinylive works from the documentation. The documenation says: When an application is deployed with Shinylive, Python and Shiny run in the web browser: the browser is effectively both the client and server for the application. There is a web server that serves files, but it does not run Python or Shiny—it can be a “dumb” static web server. Source: https://shiny.posit.co/py/docs/shinylive.html#deploying-shinylive-applications"
categories: [shiny, web app]
jupyter: python3
engine: knitr
execute:
    eval: false
filters:
  - shinylive
---

Following instructions here: https://github.com/quarto-ext/shinylive

https://pypi.org/project/python-docx/

https://shiny.posit.co/py/docs/shinylive.html#requiring-extra-packages-with-requirements.txt

https://shinylive.io/py/examples/#extra-packages

to get this to work in quarto need to create requirements.txt in the chunk: https://github.com/quarto-ext/shinylive/issues/5


This is a Shinylive application embedded in a Quarto doc.


```{shinylive-python}
#| standalone: true
#| viewerHeight: 420

from shiny import *
import docx

app_ui = ui.page_fluid(
    ui.input_slider("n", "N", 0, 100, 40),
    ui.output_text_verbatim("txt"),
    ui.download_button("downloadData", "Download")
)

def server(input, output, session):
    @render.text
    def txt():
        return f"The value of n*2 is {input.n() * 2}"

    @session.download(filename="file.docx")
    def downloadData():
        doc = docx.Document()
        doc.add_paragraph("Here is a paragraph please.")
        target_stream = StringIO()
        doc.save(target_stream)


app = App(app_ui, server)

## file: requirements.txt
python-docx
lxml

```
