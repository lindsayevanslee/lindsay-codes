---
title: "Going live with shinylive"
description: ""
date: "2024-07-30"
draft: true
image: shinylive-shinylive-deployment-model.png
image-alt: "A diagram depicting how shinylive works from the documentation. The documenation says: When an application is deployed with Shinylive, Python and Shiny run in the web browser: the browser is effectively both the client and server for the application. There is a web server that serves files, but it does not run Python or Shiny—it can be a “dumb” static web server. Source: https://shiny.posit.co/py/docs/shinylive.html#deploying-shinylive-applications"
categories: [shiny, web app]
jupyter: python3
engine: knitr
execute:
    eval: false
filters:
  - shinylive
---

Following instructions here: https://github.com/quarto-ext/shinylive

https://pypi.org/project/python-docx/

https://shiny.posit.co/py/docs/shinylive.html#requiring-extra-packages-with-requirements.txt

https://shinylive.io/py/examples/#extra-packages

to get this to work in quarto need to create requirements.txt in the chunk: https://github.com/quarto-ext/shinylive/issues/5

Followed pattern in https://shinylive.io/py/examples/#file-download for how to create a document dynamically and get it to download, also refering to python-docx docs for info on how to use that package to create a document https://python-docx.readthedocs.io/en/latest/. testing in the examples play area was helpful (removing variables like, this rendering in quarto, the fact that I'm trying it locally and in github pages, etc)


This is a Shinylive application embedded in a Quarto doc.


```{shinylive-python}
#| standalone: true
#| viewerHeight: 420

import io
import docx
from shiny import App, render, ui

app_ui = ui.page_fluid(
    ui.input_slider("n", "How did the student do on the test?", 0, 100, 40),
    ui.download_button("download2", "Download")
)

def server(input, output, session):

    @render.download(filename="file.docx")
    def download2():
        #create document object
        doc = docx.Document()

        #add content to doc -------

        #add a title
        doc.add_heading('This is a report', 0)

        #add a paragraph
        p = doc.add_paragraph('A plain paragraph having some ')
        p.add_run('bold').bold = True
        p.add_run(' and some ')
        p.add_run('italic.').italic = True

        #add a heading
        doc.add_heading('Results', level=1)

        #add some lists
        doc.add_paragraph(
            'first item in unordered list', style='List Bullet'
        )
        doc.add_paragraph(
            'first item in ordered list', style='List Number'
        )
        
        #add a table, pulling from value inputted by user
        records = (
            (input.n(), 'Score 1', 'They did alright'),
        )
        
        table = doc.add_table(rows=1, cols=3)
        hdr_cells = table.rows[0].cells
        hdr_cells[0].text = 'Score value'
        hdr_cells[1].text = 'Score name'
        hdr_cells[2].text = 'Interpretation'
        
        for qty, id, desc in records:
            row_cells = table.add_row().cells
            row_cells[0].text = str(qty)
            row_cells[1].text = id
            row_cells[2].text = desc

        #add a page break
        doc.add_page_break()


        #save document ------------------
        with io.BytesIO() as buf:
            doc.save(buf)
            yield buf.getvalue()


app = App(app_ui, server)

## file: requirements.txt
python-docx
lxml

```


drawbacks: looks like for now shinylive in quarto needs to be one big code chunk

for data security reasons we may want to make something they can use and render locally, maybe electricShine can help? https://chasemc.github.io/electricShine/ or make some desktop app? https://www.r-bloggers.com/2014/04/deploying-desktop-apps-with-r/

intersting tidbit learned: force a tuple of tuples by putting a comma at the end of tuple
