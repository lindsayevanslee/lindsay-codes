{
  "hash": "b3702211a7df0fdadeb67fe6c082e8bc",
  "result": {
    "markdown": "---\ntitle: \"Connect to a remote GPU\"\ndescription: \"Bring out the big guns\"\ndate: \"2024-11-03\"\nimage: compute_engine.png\nimage-alt: \"Logo of Google Compute Engine. White icon of a compute chip on a blue hexagon background\"\ncategories: [gpu, ai, google cloud]\njupyter: python3\nengine: knitr\nexecute:\n    eval: false\n---\n\n\nI've been playing around with some AI stuff, trying to train some models using `pytorch` (more on this later, stay tuned!). I pretty quickly ran into a road block where my poor lil 2017 MacBook Pro couldn't take the heat, and I needed to figure out how to set up a virtual machine to run my models on. Here are the steps I took to set up a remote GPU compute engine using the Google Cloud Platform and to connect to it with VS Code.\n\n# Steps\n\n## 1. Setting up cloud account\n\nThere are several different cloud providers that have remote development environment options. I chose Google just because I already had a Google Cloud Platform account. First step would be to create that account, and then:\n\n1. Create a new project in Google Cloud Platform (GCP)\n2. Go to \"API and Services\" â†’ \"Enable APIs and Services\"\n3. Search for \"Compute Engine API\" and enable it\n\n\n## 2. Creating a virutal machine instance\n\n1. In GCP, go to Compute Engine â†’ VM Instances\n2. Click \"Create Instance\" and configure with these specifications:\n   - Name: Choose something descriptive (mine is called \"vm-old-french-ai\")\n   - Region: Choose one close to your location whcih has this type of capacity available\n   - Machine Configuration:\n     - Click \"GPUs\"\n     - Select series: N1\n     - GPU: Add 1 NVIDIA T4\n     - Machine type: n1-standard-4 (4 vCPU, 15GB memory)\n   - Boot disk: Ubuntu 20.04 LTS (100GB)\n\nI had to do some trial and error creating a VM. Some errors I got were:\n\n1. Region availability: Not all types of VMs are available in all regions. Choose a region that's as close to you as possible but still has the type of VM you're choosing\n2. Region capacity errors: Some regions have the type of VM available but don't have capacity at that particular moment. You can try again later or again just try choosing a different region\n3. GPU quota error: After resolving region errors, I then got an error \"The GPUS-ALL-REGIONS-per-project quota maximum has been exceeded.\" Click \"Request Quota\" in the notification, then \"Edit Quota\". Request a quota of 1 GPU. Give some details about the project, and then request. This request is reviewed by the Google team. In my case, approval came within minutes.\n\n## 3. SSH key setup\n\nAfter the VM is set up, you next have to set up the connection to the VM using SSH:\n\n1. Generate an SSH key by opening your terminal on your local machine and running:\n\n```bash\nssh-keygen -t rsa -b 4096 -C \"your-email@example.com\"\n```\nPress Enter to accept the default file location, and optionally set a passphrase.\n\n2. Copy your public key:\n\n```bash\ncat ~/.ssh/id_rsa.pub\n```\n\n3. Add the key to your VM:\n   - Stop the VM instance\n   - Click on the VM name\n   - Click \"Edit\"\n   - Scroll down to \"SSH Keys\"\n   - Click \"Add Item\"\n   - Paste your public key\n   \nNote the username at the end of your SSH key (format: `YOUR_USERNAME@computer`) - you'll need this later.\n\n## 4. VS Code remote setup\n\nWe'll use VS Code as the development environment to connect to the new VM with:\n\n1. In VS Code, install Microsoft's \"Remote Development\" extension pack\n2. Open VS Code command palette (Ctrl/Cmd + Shift + P)\n3. Type \"Remote-SSH: Open Configuration File\"\n4. Select the first configuration file option\n5. Add this configuration (replace the placeholders):\n\n```bash\nHost YOUR_VM_NAME\n    HostName YOUR_EXTERNAL_IP\n    User YOUR_USERNAME\n    IdentityFile ~/.ssh/id_rsa\n```\n\n- `YOUR_VM_NAME`: Whatever you want to call this connection. I used the name of the VM I created in Google\n- `YOUR_EXTERNAL_IP`: Find this in your Google Cloud VM instances list\n- `YOUR_USERNAME`: The username from your SSH key \n\n6. Open VS Code command palette (Ctrl/Cmd + Shift + P) again and search for \"Remote-SSH: Connect to Host\"\n7. Select the configuration you just created\n8. If it asks you anything, say \"continue\" or \"yes\"\n\nIf it works without error, you're in!\n\nIf it fails to connect, first try connecting via terminal:\n\n```bash\nssh -v YOUR_USERNAME@YOUR_EXTERNAL_IP -i ~/.ssh/id_rsa\n```\n\nAccept the authenticity prompt by typing \"yes\". You should see a prompt like this if it worked:\n\n```bash\nYOUR_USERNAME@vm-name:~$\n```\n\nYou can also verify the connection by running this in the remote terminal:\n\n```bash\npwd   # Print working directory\nwhoami   # Should show your username\nhostname  # Should show your VM name\n```\n\nIf this terminal connection works but VS Code doesn't, close VS Code completely and try again.\n\n\n\n## 5. Python environment setup\n\nAfter connecting to the VM, now we have to set up the python development environment so that we can actually run stuff.\n\n1. Install Miniconda:\n\n```bash\nwget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh\nchmod +x Miniconda3-latest-Linux-x86_64.sh\n./Miniconda3-latest-Linux-x86_64.sh\n```\nFollow the prompts and say 'yes' to initialization.\n\n2. If you have an existing project with an `environment.yml` file:\n\n```bash\nconda env create -f environment.yml\nconda activate YOUR_ENV_NAME\n```\n\n## 6. Git setup\n\nMy code is hosted on GitHub so I also have to set up git to work with this code on the VM:\n\n1. Install git:\n```bash\nsudo apt update\nsudo apt install git -y\n```\n\n2. Configure git:\n```bash\ngit config --global user.name \"Your Name\"\ngit config --global user.email \"your.email@example.com\"\n```\n\n3. For repository access, create a fine-grained Personal Access Token (PAT) on GitHub:\n   - Go to GitHub Settings â†’ Developer Settings â†’ Personal Access Tokens â†’ Fine-grained tokens\n   - Set Repository Access to \"Only select repositories\"\n   - Choose your specific repository\n   - Under Permissions â†’ Repository permissions, set:\n     - Contents: \"Read and write\"\n     - Commit statuses: \"Read and write\"\n     - Metadata: \"Read-only\"\n     - Pull requests: \"Read and write\"\n     - Workflows: \"Read and write\"\n\n4. Clone your repository:\n\n```bash\ngit clone YOUR_REPO_URL\n```\nUse your GitHub username and PAT when prompted for credentials.\n\n## 7. NVIDIA and CUDA setup\n\nNext we have to install some stuff that lets you use the GPUs. Don't ask me what a GPU is or what all this does, but it worked:\n\n1. Verify that we're on Ubuntu:\n\n```bash\nlsb_release -a\n```\n\n2. Install NVIDIA drivers and CUDA:\n\n```bash\nsudo add-apt-repository ppa:graphics-drivers/ppa\nsudo apt update\nsudo apt install -y ubuntu-drivers-common\nsudo ubuntu-drivers devices    # Shows available drivers\nsudo apt install -y nvidia-driver-560 #Choose the driver from the above command that is listed as recommended\nsudo apt install -y nvidia-cuda-toolkit\n```\n\n3. Reset your VM by going to GCP list of VM instances and clicking \"...\" -> \"Reset\". Verify installation of drivers worked with:\n\n```bash\nnvidia-smi\nnvcc --version\n```\n\n## 8. PyTorch GPU setup\n\nFinally we have to check that our installation of pytorch is able to access the GPU:\n\n1. Verify GPU access:\n```python\npython -c \"import torch; print('PyTorch version:', torch.__version__); print('CUDA available:', torch.cuda.is_available()); print('CUDA version PyTorch was built with:', torch.version.cuda); print('GPU device:', torch.cuda.get_device_name(0) if torch.cuda.is_available() else 'None')\"\n```\n\n2. Test GPU functionality:\n```python\npython -c \"import torch; x = torch.randn(1000, 1000).cuda(); y = torch.randn(1000, 1000).cuda(); z = torch.matmul(x, y); print('Test completed on GPU')\"\n```\n\nIf you get any failures after running this test code, you may need to fiddle with some versions of packages you're installing in your `environment.yml` file. Best advice I can give is to ask ChatGPT/Claude/whatever. This is something that worked for me at one point--uninstalling some package versions and installing other versions with a CUDA toolkit:\n\n```bash\nconda remove pytorch torchvision torchaudio  # Remove CPU version if present\nconda install pytorch torchvision torchaudio cudatoolkit=10.1 -c pytorch\n```\n\nIf you see a version mismatch between CUDA and PyTorch, it should probably be okay as long as these tests run successfully.\n\n# Conclusion\n\nAfter all of that, your remote environment should be ready to go to run some AI models at non-sluggish speeds. Remember to turn your compute off when you aren't using it or prepare for ðŸ’¸ðŸ’¸ðŸ’¸\n\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}