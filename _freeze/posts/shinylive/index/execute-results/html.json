{
  "hash": "932b04e008196d9f493332048f761d53",
  "result": {
    "markdown": "---\ntitle: \"Going live with shinylive\"\ndescription: \"\"\ndate: \"2024-07-30\"\ndraft: true\nimage: shinylive-shinylive-deployment-model.png\nimage-alt: \"A diagram depicting how shinylive works from the documentation. The documenation says: When an application is deployed with Shinylive, Python and Shiny run in the web browser: the browser is effectively both the client and server for the application. There is a web server that serves files, but it does not run Python or Shiny—it can be a “dumb” static web server. Source: https://shiny.posit.co/py/docs/shinylive.html#deploying-shinylive-applications\"\ncategories: [shiny, web app]\njupyter: python3\nengine: knitr\nexecute:\n    eval: false\nfilters:\n  - shinylive\n---\n\n\nFollowing instructions here: https://github.com/quarto-ext/shinylive\n\nhttps://pypi.org/project/python-docx/\n\nhttps://shiny.posit.co/py/docs/shinylive.html#requiring-extra-packages-with-requirements.txt\n\nhttps://shinylive.io/py/examples/#extra-packages\n\nto get this to work in quarto need to create requirements.txt in the chunk: https://github.com/quarto-ext/shinylive/issues/5\n\n\nThis is a Shinylive application embedded in a Quarto doc.\n\n\n```{shinylive-python}\n#| standalone: true\n#| viewerHeight: 420\n\nfrom shiny import *\nimport docx\n\napp_ui = ui.page_fluid(\n    ui.input_slider(\"n\", \"N\", 0, 100, 40),\n    ui.output_text_verbatim(\"txt\"),\n    ui.download_button(\"downloadData\", \"Download\")\n)\n\ndef server(input, output, session):\n    @render.text\n    def txt():\n        return f\"The value of n*2 is {input.n() * 2}\"\n\n    @session.download(filename=\"file.docx\")\n    def downloadData():\n        doc = docx.Document()\n        doc.add_paragraph(\"Here is a paragraph please.\")\n        target_stream = StringIO()\n        doc.save(target_stream)\n\n\napp = App(app_ui, server)\n\n## file: requirements.txt\npython-docx\nlxml\n\n```\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}