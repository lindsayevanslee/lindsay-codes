{
  "hash": "69ca1c4d5338bfbe1757e8ee646cac26",
  "result": {
    "markdown": "---\ntitle: \"Going live with Shinylive\"\ndescription: \"Am I web developer?\"\ndate: \"2024-08-01\"\nimage: shinylive-shinylive-deployment-model.png\nimage-alt: \"A diagram depicting how shinylive works from the documentation. The documenation says: When an application is deployed with Shinylive, Python and Shiny run in the web browser: the browser is effectively both the client and server for the application. There is a web server that serves files, but it does not run Python or Shiny—it can be a “dumb” static web server. Source: https://shiny.posit.co/py/docs/shinylive.html#deploying-shinylive-applications\"\ncategories: [shiny, web app, python]\njupyter: python3\nengine: knitr\nexecute:\n    eval: false\nfilters:\n  - shinylive\n---\n\n\nI had a meeting at work recently where someone described a long, tedious process her team had to go through to write up a specifically-formatted report on a regular basis. She asked for help finding ways to reduce the time it takes to write these documents, namely by automating the sections that are fairly rote. \n\nOne option I thought of immediately was to build a [Shiny](https://www.rstudio.com/products/shiny/) app. I was thinking the user could input some key data points into the app, and then the app would analyze that data and produce a Word doc in a particular format based on the results.\n\nI've dabbled in Shiny before, but one struggle was figuring out how to host it. You could use a service like [shinyapps.io](https://www.shinyapps.io), but using the free version isn't very enterprise-friendly, and the non-free version is, well, not free. Then as if the gods were smiling down upon me, I came across a post in LinkedIn about [shinylive](https://shiny.posit.co/py/docs/shinylive.html), which is a flavor of shiny that runs completely in your web browser. In theory it would be possible to \"host\" a shinylive application on a Quarto website hosted on GitHub Pages completely for free. What better way to test this idea than on this very Quarto website hosted on GitHub Pages? \n\nI started off by following the instructions for the [Quarto extension for shinylive](https://github.com/quarto-ext/shinylive). I installed the shinylive python package with:\n\n\n\n::: {.cell}\n\n```{.bash .cell-code}\npip install shinylive --upgrade\n```\n:::\n\n\n\n...and added the extension to my quarto project ([the repo for this website](https://github.com/lindsayevanslee/lindsay-codes)) with:\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nquarto add quarto-ext/shinylive\n```\n:::\n\n\nIn the YAML header for [this post](https://github.com/lindsayevanslee/lindsay-codes/blob/main/posts/shinylive/index.qmd) I added:\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nfilters:\n  - shinylive\n```\n:::\n\n\nThen the code for your shinylive application should all live in one code chunk marked with `{shinylive-python}` and containing `#| standalone: true`. This \"standalone\" bit apparently tells the code this chunk is a complete Shiny application instead of one spread across multiple files or chunks in the document, which they luckily say will be supported in the future.\n\nI wanted my shinylive application to have a download button that allows the user to download a `docx` file. I found the python package [`python-docx`](https://pypi.org/project/python-docx/) which can accomplish this. Next I had to figure out how to get shinylive to install and use this package. The [documentation](https://shiny.posit.co/py/docs/shinylive.html#requiring-extra-packages-with-requirements.txt) and [examples](https://shinylive.io/py/examples/#extra-packages) say you can create a `requirements.txt` file. But when I tried to create a `requirements.txt` file in the same folder as my quarto file, the application wouldn't work because `python-docx` wasn't being installed, indicating the requirements were not being recognized. After a lot of digging I came across [this GitHub issue](https://github.com/quarto-ext/shinylive/issues/5) that showed how you can get your quarto-based shinylive application to recognize other files by creating them dynamically in the same code chunk using a format like:\n\n\n::: {.cell}\n\n```{.bash .cell-code}\n## file: requirements.txt\npython-docx\nlxml\n```\n:::\n\n\nReading back at the [quarto extension documentation](https://github.com/quarto-ext/shinylive), I see they also explain how to do this there. If only I had originally thought to scroll down.\n\nTo create my actual prototype shinylive app, I followed the patterns in the [examples](https://shinylive.io/py/examples/#file-download) for dynamically creating a file and allowing the user to download it. I also referred to the [python-docx](https://python-docx.readthedocs.io/en/latest/) example code for how to create a Word doc with this package. Testing my app in the shinylive examples play area was helpful for debugging, which allowed me to removing variables like the fact that I'm rendering specifically in a Quarto site, that I'm publishing to GitHib Pages, etc.\n\nWithout further ado, here is my gorgeous and perfect app! You can see the code in the [repo for this site](https://github.com/lindsayevanslee/lindsay-codes/blob/main/posts/shinylive/index.qmd).\n\n\n```{shinylive-python}\n#| standalone: true\n\nimport io\nimport docx\nfrom shiny import App, render, ui\n\napp_ui = ui.page_fluid(\n    ui.input_slider(\"n\", \"How did the student do on the test?\", 0, 100, 40),\n    ui.download_button(\"download2\", \"Download\")\n)\n\ndef server(input, output, session):\n\n    @render.download(filename=\"file.docx\")\n    def download2():\n        #create document object\n        doc = docx.Document()\n\n        #add content to doc -------\n\n        #add a title\n        doc.add_heading('This is a report', 0)\n\n        #add a paragraph\n        p = doc.add_paragraph('A plain paragraph having some ')\n        p.add_run('bold').bold = True\n        p.add_run(' and some ')\n        p.add_run('italic.').italic = True\n\n        #add a heading\n        doc.add_heading('Results', level=1)\n\n        #add some lists\n        doc.add_paragraph(\n            'first item in unordered list', style='List Bullet'\n        )\n        doc.add_paragraph(\n            'first item in ordered list', style='List Number'\n        )\n\n        #define a function that outputs a string based on the value of input.n()\n        def get_interpretation(score):\n            if score < 50:\n                return \"They did poorly\"\n            elif score < 70:\n                return \"They did okay\"\n            elif score < 90:\n                return \"They did well\"\n            else:\n                return \"They did excellent\"\n        \n        #add a table, pulling from value inputted by user\n        records = (\n            ('Score 1', input.n() , get_interpretation(input.n())),\n        )\n\n        \n        table = doc.add_table(rows=1, cols=3)\n        hdr_cells = table.rows[0].cells\n        hdr_cells[0].text = 'Score name'\n        hdr_cells[1].text = 'Score value'\n        hdr_cells[2].text = 'Interpretation'\n        \n        for score_name, score_value, score_desc in records:\n            row_cells = table.add_row().cells\n            row_cells[0].text = score_name\n            row_cells[1].text = str(score_value)\n            row_cells[2].text = score_desc\n\n        #add a page break\n        doc.add_page_break()\n\n\n        #save document ------------------\n        with io.BytesIO() as buf:\n            doc.save(buf)\n            yield buf.getvalue()\n\n\napp = App(app_ui, server)\n\n\n## file: requirements.txt\npython-docx\nlxml\n\n```\n\n\nOne significant drawback with this so far is like I've already mentioned, your app has to be in one big code chunk, at least if you are embedding your shinylive app in Quarto. This limits how complex your app can be, which may be an issue in my particular use case. Another issue for me is that for data security reasons, my end users may want something that they can install and render on their own local computer without use of the internet. I've tried some light googling to see if it's easy to create a desktop app from shiny and it [doesn't look so easy](https://www.r-bloggers.com/2014/04/deploying-desktop-apps-with-r/). \n\nSo we'll see if this actually ends up being useful for the user I had in mind, but even if it isn't, it was cool to learn anyway. Another fun python fact I learned: to force a tuple of tuples to remain a tuple of tuples even if it's only got one tuple in it, slap a comma at the end of your tuple like so:\n\n\n::: {.cell}\n\n```{.python .cell-code}\nrecords = (\n    ('Score 1', input.n() , get_interpretation(input.n())), #this last comma is key\n)\n```\n:::\n\n\nLessons abound!\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}