{
  "hash": "dbee01d4e7f4faf19ed370432a653fea",
  "result": {
    "markdown": "---\ntitle: \"Get started with conda\"\ndescription: \"I've put off learning this for too long\"\ndate: \"2024-04-05\"\nimage: conda.png\nimage-alt: \"Logo for conda, a green C with some snake-like markings\"\ncategories: [python, conda, workflow]\njupyter: python3\nengine: knitr\nexecute:\n    eval: false\n---\n\n\nMy python skills aren't super strong yet, but they're strong enough to know that environment management is key, and it's an area I know next to nothing about. I figured it's time to at least learn the basics.\n\nThere seem to be two main tools for environment management in python: `conda` and `venv`. I tried to do a little bit of research to see what the pros and cons are of each. [This reddit thread](https://www.reddit.com/r/datascience/comments/rapwvc/conda_vs_venv/) was useful, and [this blog post](https://jakevdp.github.io/blog/2016/08/25/conda-myths-and-misconceptions/) linked to from that thread was helpful too. It seems like the main differences are that `venv`'s main purpose is for isolating a virtual environment, while `conda` provides more help managing packages for your project. It appears `conda` helps you by installing commonly used packages, which may not be suitable in industry/production settings. I'm just playing around and need all the help I can get, so I decided to take a crack at conda first.\n\nThere are two flavors of `conda`: `anaconda` and `miniconda`. `anaconda` comes with a lot more packages and also an app to manage the packages. `miniconda` is more stripped-down. I decided to try `miniconda` first, because I didn't like the idea of installing more apps on my computer.\n\nI'm on a Mac, and the savior for any amateur programmer on a Mac is [Homebrew](https://brew.sh), a wonderful package manager for macOS which makes it so much easier to install all the little programs and utilities needed to code stuff. I can't remember all the things I've installed with it, but it always seems to be there to save the day when I'm having issues installing python or R packages. Luckily it saves the day here again: you can install `miniconda` with Homebrew as well. [This Medium article](https://njfberg.medium.com/macbook-setup-for-a-ml-engineer-using-homebrew-6ba183773d19) helped me figure out how. All I needed to do was run this in the Terminal:\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nbrew install --cask miniconda\nconda init zsh\n```\n:::\n\n\nThen restart the Terminal. I tested the install worked by running `conda`, which didn't return any errors, which is what I wanted to see.\n\nNow to try our first environment! I used my [inky-frame](https://github.com/lindsayevanslee/inky-frame) project as a test case (check out my post about it [here](../webscraping-showtimes/index.qmd)). I first wanted to try the more point-and-click way to [create a python environment in VS Code](https://code.visualstudio.com/docs/python/environments). It says by using the \"Python: Create Environment\" command from the Control Palette, it should automatically detect an existing `requirements.txt` file to install the packages you need to create the environment. I tried this first, but after trying to run a script in the new environment, I got \"package not found\" errors, meaning it didn't seem to actually install the necessary packages listed in `requirements.txt`.\n\nNext I tried creating the `conda` environment using the command line by running: \n\n\n::: {.cell}\n\n```{.bash .cell-code}\nconda install --file requirements.txt\n```\n:::\n\n\nBut this still didn't seem to install the packages. It gave a long error message like this:\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nChannels:\n - defaults\nPlatform: osx-64\nCollecting package metadata (repodata.json): done\nSolving environment: failed\n\nLibMambaUnsatisfiableError: Encountered problems while solving:\n  - nothing provides requested asttokens 2.2.1\n  - nothing provides requested charset-normalizer 3.1.0\n  ...\n\nCould not solve for environment specs\nThe following packages are incompatible\n├─ appnope 0.1.3  is installable and it requires\n│  └─ python >=3.12,<3.13.0a0 , which can be installed;\n├─ asttokens 2.2.1  does not exist (perhaps a typo or a missing channel);\n...\n```\n:::\n\n\n(where `...` means multiple lines of the same pattern for various other packages). I was stumped so I pasted this error into GitHub Copilot and asked what it meant. It told me I may need to add a [\"channel\"](https://stackoverflow.com/questions/42309333/explanation-of-different-conda-channels) for `conda` to search in; I only had the `defaults` channel added, which didn't seem to have all the packages I was asking for. It suggested I add the `conda-forge` channel. I did this by running:\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nconda config --add channels conda-forge\n```\n:::\n\n\nAfter doing this, I tried to create the environment again, and I got a new but more promising error. This time it said there were only two packages it wasn't able to install (`pure-eval==0.2.2` and `stack-data==0.6.2`). It suggested searching [https://anaconda.org](https://anaconda.org) to see if I could find a channel they were in that I could add. I tried searching but couldn't find any channels they were in. \n\nLuckily from the [`conda` documentation](https://docs.conda.io/projects/conda/en/4.6.1/user-guide/tasks/manage-environments.html#create-env-file-manually) I saw that you can still install packages with `pip` while using `conda`. I wasn't sure how to tell `conda` to use `pip` using a `requirements.txt` file, but it seemed like it was easier using a `environment.yml` file instead. I asked GitHub Copilot to help me convert my `requirements.txt` to a `environment.yml` file, then tried to create the environment again with: \n\n\n::: {.cell}\n\n```{.bash .cell-code}\nconda env create -f environment.yml\n```\n:::\n\n\nI still got an error, but luckily it was a small one: I needed to use single `=` for specifying versions for the `dependencies` in `environment.yml`, while I needed to use `==` for specifying versions for packages installed with `pip`. Fixing this, I reran the command, and finally I created a working `conda` environment! I also retried the point-and-click way to create an environment in VS Code, it also worked, automatically using the `environment.yml` file to install the necessary packages.\n\nFor the moment I'm keeping both `requirements.txt` and `environment.yml` in my repo because `requirements.txt` is used in the GitHub Actions I have set up. I also noticed that my GitHub Actions use different python version than what I'm using locally in this new `conda` environment. But I'll take a few moments to bask in my win and will worry about that later.\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}